plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version

base {
	archivesName = "${project.archives_base_name}"
}

repositories {
	mavenCentral()
	maven { url 'https://maven.fabricmc.net/' }
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven { url = "https://api.modrinth.com/maven" }
	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'io\\.github\\.onyxstudios.*'
		}
	}
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/'
	}
	maven { url = 'https://maven.minecraftforge.net/' }
	maven { url = "https://maven.kyrptonaught.dev" }
	maven {
		// location of the maven that hosts JEI files since January 2023
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
	maven { url 'https://repo.repsy.io/mvn/jiraiyah/jilibs' }

}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Ji Lib Mods Dependency <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	modImplementation include("jiraiyah.logger:jilogger:${jilogger_version}")
	modImplementation include("jiraiyah.config:jiconfig:${jiconfig_version}")
	modImplementation include("jiraiyah.reference:jireference:${jireference_version}")
	modImplementation include("jiraiyah.register:jiregister:${jiregister_version}")
	modImplementation include("jiraiyah.jiralib:jiralib:${jiralib_version}")
	modImplementation include("jiraiyah.inventory:jinventory:${jinventory_version}")
	modImplementation include("jiraiyah.fluid:jifluid:${jifluid_version}")
	modImplementation include("jiraiyah.energy:jienergy:${jienergy_version}")
	modImplementation include("jiraiyah.machina:jimachina:${jimachina_version}")

	// Energy API Handling Dependency <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	include modApi("teamreborn:energy:${project.energy_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// PAL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	modImplementation "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"
	include "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"


	// Jade
	//modImplementation "curse.maven:jade-324717:${project.jade_version}"

	// Mod Menu
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

	// Mod Menu Badges Lib <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	include(modImplementation("maven.modrinth:modmenu-badges-lib:${badges_lib_version}"))

	// LibGUI <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//modImplementation include("io.github.cottonmc:LibGui:${project.libgui_version}")

	// Terra Former Wood: Needed for Sign and Boat <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	modImplementation "com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_version}"
	include "com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_version}"

	// Kyrptonaught <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	modImplementation "net.kyrptonaught:customportalapi:${project.kyrptonaught_version}"
	include "net.kyrptonaught:customportalapi:${project.kyrptonaught_version}"

	// EMI Compatibility <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"

	// REI Compatibility <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	//modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"
	//modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

	// JEI Compatibility <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//modCompileOnlyApi("mezz.jei:jei-${project.jei_mc_version}-fabric-api:${project.jei_version}")
	//modRuntimeOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}")

	// Cloth Config
	//modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
	//    exclude(group: "net.fabricmc.fabric-api")
	//}

	// Architectury
	//modApi "dev.architectury:architectury-fabric:${project.architectury_version}"

	// TerraBlender
	//modImplementation "com.github.glitchfiend:TerraBlender-fabric:${project.minecraft_version}-${project.terrablender_version}"

	// Tech Reborn Runtime Only
	//modRuntimeOnly("curse.maven:reborncore-237903:${project.reborn_curse_version}")
	//modRuntimeOnly("curse.maven:techreborn-233564:${project.tech_reborn_version}")

	// EMI Runtime Only
	//modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

	// REI Runtime Only
	//modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

	// JEI Runtime Only
	//modRuntimeOnly("mezz.jei:jei-${project.jei_mc_version}-fabric:${project.jei_version}")

	include(implementation project(path: ':ultraio_base', configuration: "namedElements"))
	include(implementation project(path: ':ultraio_cable', configuration: "namedElements"))
}

processResources {
	inputs.property "version", project.version
	inputs.property "loader_ver", loader_version
	inputs.property "game_ver", minecraft_version
	inputs.property "java_ver", java_version

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"loader_ver": loader_version,
				"game_ver": minecraft_version,
				"java_ver": java_version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {
	}
}